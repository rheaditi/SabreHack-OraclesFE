import JustEngine from '../JustEngine';
import GSUBProcessor from './GSUBProcessor';

class OTJustEngine extends JustEngine {
  constructor(font) {
    this.font = font;
    this.table = this.font.JSTF;
    
    this.script = null;
    this.scriptTag = null;
    
    this.language = null;
    this.languageTag = null;
    
    this.selectScript();
    // console.log @font.GSUB
    console.log(require('util').inspect(this.language, {depth: 50}));
    
    for (let i = 0; i < this.language.length; i++) {
      let priority = this.language[i];
      if (priority.extensionDisableGSUB) {
        priority.extensionDisableGSUB.forEach(i => { 
          return console.log(require('util').inspect(this.font.GSUB.lookupList[i], {depth: 50}));
        });
      }
    }
  }
    
    
  findScript(script) {
    for (let i = 0; i < this.table.scriptList.length; i++) {
      let entry = this.table.scriptList[i];
      if (entry.tag === script) {
        return entry;
      }
    }
      
    return null;
  }
    
  selectScript(script, language) {
    if (!(this.script != null) || script !== this.scriptTag) {
      if (script != null) {
        var entry = this.findScript(script);
      }
      
      if (typeof entry === 'undefined' || entry === null) { var entry = this.findScript('DFLT'); }
      if (typeof entry === 'undefined' || entry === null) { var entry = this.findScript('dflt'); }
      if (typeof entry === 'undefined' || entry === null) { var entry = this.findScript('latn'); }
      
      if (entry == null) { return; }
            
      this.scriptTag = entry.tag;
      this.script = entry.script;
    }
    
    if ((language != null) && language !== this.langugeTag) {
      for (let i = 0; i < this.script.langSysRecords.length; i++) {
        let lang = this.script.langSysRecords[i];
        if (lang.tag === language) {
          this.language = lang.langSys;
          break;
        }
      }
    }
        
    return this.language != null ? this.language : (this.language = this.script.defaultLangSys);
  }
    
  postprocess(glyphs, advances, distances) {
    if (typeof GSUBProcessor === 'undefined' || GSUBProcessor === null) { GSUBProcessor = new GSUBProcessor(this, this.font.GSUB); }
    
    /*
    factor phase: compute factors from shrinkJstfMax and extensionJstfMax
    postprocess: enable/disable GSUB/GPOS - maybe supposed to be done first? i.e. in order of priority
    */
    
    // for priority in @language
    //   if priority.extensionDisableGSUB
    //     console.log priority.extensionDisableGSUB.map (i) => @font.GSUB.lookupList[i]
      
    return false;
  }
}
    
export default OTJustEngine;
